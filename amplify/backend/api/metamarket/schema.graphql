# @model directive creates CRUD operations and DynamoDB database tables (also adds the helper fields createdAt and updatedAt to your type)
type Nft @model @searchable @auth(rules: [
      { allow: public, operations: [read], provider: apiKey }
      { allow: owner }
  ]) {
    id: ID!
    name: String! @index(name: "byName", queryField: "nftByName",)
    price: Int @index(name: "byPrice", queryField: "nftByPrice")
    category: String! @index(name: "byCategory", queryField: "nftByCategory")
    blockchain: String!
    colors: [String]
    xCoordinate: String
    yCoordinate: String
    description: String
    imageId: String!
    owner: String! @index(name: "byOwner", queryField: "nftByOwner")
    listed: ListedStatus @index(name: "byListed", queryField: "nftByListedStatus")
    orders: [NftOrder] @hasMany
}

enum ListedStatus {
  YES
  NO
}

type NftOrder @model @auth(rules: [
  {allow: owner, identityClaim: "email"}
  {allow: public, operations: [read]}
]) {
  id: ID!
  nftId: ID! @index(name: "byNft", sortKeyFields: ["orderId"], queryField: "nftOrderByOrderId")
  orderId: ID! 
  nft: Nft @belongsTo
  order: [Order] @hasMany
}

type Order @model @auth(rules: [
  {allow: owner, identityClaim: "email"}
  {allow: public, operations: [read]}
]) {
  id: ID!
  user: String! @index(name: "byUser", queryField: "orderByUser")
  date: String!
  total: Float!
  nfts: [NftOrder] @hasMany
}

type User @model @auth(rules: [
  { allow: owner }
  {allow: public, operations: [read]}
  ]) {
  userId: String! @primaryKey
  username: String! @index(name: "byName", queryField: "userByUsername")
  favorited: [Nft]
  # Under the hood, @hasMany configures a secondary index on the related table to enable you to query the related model from the source model.
  owned: [Nft] @hasMany
  sold: [Nft]
  stripeId: String
  chargesEnabled: Boolean
}

type signUpResponse {
  object: String
  created: Int
  expires_at: Int
  url: String
}

input SignUpUserInput {
  username: String!
  email: String!
  userId: String!
}

type Mutation {
  signUpUser(input: SignUpUserInput!): signUpResponse
    @function(name: "createStripeConnectAccount-${env}")
}

# enum OrderStatus {
#   SUCCESS
#   FAILED
# }

# input CartItem {
#   id: ID!
#   name: String
#   imageId: String
#   price: Float
#   amount: Int
# }

# input ProcessOrderInput {
#   id: ID!
#   cart: [CartItem]
#   total: Float!
#   token: String!
#   address: String
# }

# type Mutation {
#   processOrder(input: ProcessOrderInput!): OrderStatus
#     @function(name: "processPayment-${env}")
#     @function(name: "createOrder-${env}")
# }
